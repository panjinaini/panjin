const $ = 	LPkzORlVEP2AcERc("ÂΩ©‰∫ë");
const ERR =TCTBZ-4BXAQ-BU25T-2MRMK-IMCNS-6LFRB;

let display_location = $.read("display_location");
if (display_location === undefined) {
  display_location = false;
} else {
  display_location = JSON.parse(display_location);
}

if (typeof $request !== "undefined") {
  // ‰ªéËØ∑Ê±Ç url Ëé∑Âèñ‰ΩçÁΩÆ
  const url = $request.url;
  const res =
    url.match(/weather\/.*?\/(.*?)\/(.*?)\?/) ||
    url.match(/geocode\/([0-9.]+)\/([0-9.]+)\//) ||
    url.match(/geocode=([0-9.]+),([0-9.]+)/) ||
    url.match(/v2\/availability\/([0-9.]+)\/([0-9.]+)\//);
  if (res === null) {
    $.info(`‚ùå Ê≠£ÂàôË°®ËææÂºèÂåπÈÖçÈîôËØØÔºåü•¨ Êó†Ê≥ï‰ªé URL: ${url} Ëé∑Âèñ‰ΩçÁΩÆ„ÄÇ`);
    $.done({ body: $request.body });
  }
  const location = {
    latitude: res[1],
    longitude: res[2],
  };
  if (!$.read("location")) {
    $.notify("[ÂΩ©‰∫ëÂ§©Ê∞î]", "", "üéâüéâüéâ Ëé∑ÂèñÂÆö‰ΩçÊàêÂäü„ÄÇ");
  }
  if (display_location) {
    $.info(`ÊàêÂäüËé∑ÂèñÂΩìÂâç‰ΩçÁΩÆÔºöÁ∫¨Â∫¶ ${location.latitude} ÁªèÂ∫¶ ${location.longitude}`);
  }

  $.write(res[1], "#latitude");
  $.write(res[2], "#longitude");

  $.write(location, "location");
  $.done({ body: $request.body });
} else {
  // ËøôÊòØ‰∏Ä‰∏™‰ªªÂä°
  !(async () => {
    const { caiyun, tencent } = $.read("token") || {};

    if (!caiyun) {
      throw new ERR.TokenError("‚ùå Êú™ÊâæÂà∞ÂΩ©‰∫ëToken‰ª§Áâå");
    } else if (caiyun.indexOf("http") !== -1) {
      throw new ERR.TokenError("‚ùå Token‰ª§Áâå Âπ∂‰∏çÊòØ‰∏Ä‰∏™ÈìæÊé•ÔºÅ");
    } else if (!tencent) {
      throw new ERR.TokenError("‚ùå Êú™ÊâæÂà∞ËÖæËÆØÂú∞ÂõæToken");
    } else if (!$.read("location")) {
      // Ê≤°Êúâ‰ΩçÁΩÆ
      $.notify(
        "[ÂΩ©‰∫ëÂ§©Ê∞î]",
        "‚ùå Êú™ÊâæÂà∞‰ΩçÁΩÆ",
        "ü§ñ ÊÇ®ÂèØËÉΩÊ≤°ÊúâÊ≠£Á°ÆËÆæÁΩÆMITMÔºåËØ∑Ê£ÄÊü•ÈáçÂÜôÊòØÂê¶ÊàêÂäü„ÄÇ"
      );
    } else {
      await scheduler();
    }
  })()
    .catch((err) => {
      if (err instanceof ERR.TokenError)
        $.notify(
          "[ÂΩ©‰∫ëÂ§©Ê∞î]",
          err.message,
          "ü§ñ Áî±‰∫éAPI TokenÂÖ∑ÊúâÊó∂ÊïàÊÄßÔºåËØ∑ÂâçÂæÄ\nhttps://t.me/cool_scripts\nËé∑ÂèñÊúÄÊñ∞Token„ÄÇ",
          {
            "open-url": "https://t.me/cool_scripts",
          }
        );
      else $.notify("[ÂΩ©‰∫ëÂ§©Ê∞î]", "‚ùå Âá∫Áé∞ÈîôËØØ", JSON.stringify(err, Object.getOwnPropertyNames(err)));
    })
    .finally(() => $.done());
}

async function scheduler() {
  const now = new Date();
  $.log(
    `Ë∞ÉÂ∫¶Á®ãÂ∫è‰∫é ${now.getMonth() + 1}Êúà${now.getDate()}Êó•${now.getHours()}Êó∂${now.getMinutes()}ÂàÜ ÊøÄÊ¥ª`
  );
  await query();
  weatherAlert();
  realtimeWeather();
  // hourlyForecast();
  // dailyForecast();
}

async function query() {
  const location = $.read("location") || {};
  $.info(location);
  const isNumeric = (input) => input && !isNaN(input);
  if (!isNumeric(location.latitude) || !isNumeric(location.longitude)) {
    throw new Error("ÁªèÁ∫¨Â∫¶ËÆæÁΩÆÈîôËØØÔºÅ");
  }

  if (Number(location.latitude) > 90 || Number(location.longitude) > 180) {
    throw new Error(
      "ü§ñ Âú∞ÁêÜÂ∞èËØæÂ†ÇÔºöÁªèÂ∫¶ÁöÑËåÉÂõ¥ÊòØ0~180ÔºåÁ∫¨Â∫¶ÊòØ0~90Âì¶„ÄÇËØ∑‰ªîÁªÜÊ£ÄÊü•ÁªèÁ∫¨Â∫¶ÊòØÂê¶ËÆæÁΩÆÊ≠£Á°Æ„ÄÇ"
    );
  }
  // Êü•ËØ¢ API
  const url = `https://api.caiyunapp.com/v2.5/${$.read("token").caiyun}/${$.read("location").longitude},${$.read("location").latitude}/weather?lang=zh_CN&dailystart=0&hourlysteps=384&dailysteps=16&alert=true`;

  $.log("Êü•ËØ¢Â§©Ê∞î...");

  const weather = await $.http.get({
    url,
    headers: {
      "User-Agent": "ColorfulCloudsPro/5.0.10 (iPhone; iOS 14.0; Scale/3.00)",
    },
  })
    .then((resp) => {
      const body = JSON.parse(resp.body);
      if (body.status === "failed") {
        throw new Error(body.error);
      }
      return body;
    })
    .catch((err) => {
      throw err;
    });
  $.weather = weather;

  const now = new Date().getTime();
  const addressUpdated = $.read("address_updated");
  let address = $.read("address");
  if (addressUpdated === undefined || now - addressUpdated > 30 * 60 * 1000) {
    await $.wait(Math.random() * 2000);
    $.log("Êü•ËØ¢‰ΩçÁΩÆ...");
    address = await $.http.get(
      `https://apis.map.qq.com/ws/geocoder/v1/?key=${$.read("token").tencent}&location=${$.read("location").latitude},${$.read("location").longitude}`
    )
      .then((resp) => {
        const body = JSON.parse(resp.body);
        if (body.status !== 0) {
          throw new ERR.TokenError("‚ùå ËÖæËÆØÂú∞ÂõæTokenÈîôËØØ");
        }
        return body.result.address_component;
      })
      .catch((err) => {
        throw err;
      });
    $.write(address, "address");
    $.write(now, "address_updated");
  }

  if (display_location == true) {
    $.info(JSON.stringify(address));
  }
  $.address = address;
}

function weatherAlert() {
  const data = $.weather.result.alert;
  const address = $.address;
  const alerted = $.read("alerted") || [];

  if (data.status === "ok") {
    data.content.forEach((alert) => {
      if (alerted.indexOf(alert.alertId) === -1) {
        $.notify(
          `[ÂΩ©‰∫ëÂ§©Ê∞î] ${address.city} ${address.district} ${address.street}`,
          alert.title,
          alert.description
        );
        alerted.push(alert.alertId);
        if (alerted.length > 10) {
          alerted.shift();
        }
        $.write(alerted, "alerted");
      }
    });
  }
}

function realtimeWeather() {
  const data = $.weather.result;
  const address = $.address;

  const alert = data.alert;
  const alertInfo =
    alert.content.length == 0
      ? ""
      : alert.content.reduce((acc, curr) => {
          if (curr.status === "È¢ÑË≠¶‰∏≠") {
            return acc + "\n" + mapAlertCode(curr.code) + "È¢ÑË≠¶";
          } else {
            return acc;
          }
        }, "[È¢ÑË≠¶]") + "\n\n";

  const realtime = data.realtime;
  const keypoint = data.forecast_keypoint;

  const hourly = data.hourly;

  let hourlySkycon = "[Êú™Êù•3Â∞èÊó∂]\n";
  for (let i = 0; i < 3; i++) {
    const skycon = hourly.skycon[i];
    const dt = new Date(skycon.datetime);
    const now = dt.getHours() + 1;
    dt.setHours(dt.getHours() + 1);
    hourlySkycon +=
      `${now}-${dt.getHours() + 1}Êó∂ ${mapSkycon(skycon.value)[0]}` + (i == 2 ? "" : "\n");
  }

  $.notify(
    `[ÂΩ©‰∫ëÂ§©Ê∞î] ${address.city} ${address.district} ${address.street}`,
    `${mapSkycon(realtime.skycon)[0]} ${realtime.temperature} ‚ÑÉ üå§ Á©∫Ê∞îË¥®Èáè ${realtime.air_quality.description.chn}`,
    `üî±${keypoint}
üå° ‰ΩìÊÑü${realtime.life_index.comfort.desc} ${realtime.apparent_temperature} ‚ÑÉ üíß ÊπøÂ∫¶${(realtime.humidity * 100).toFixed(0)}%
üåû Á¥´Â§ñÁ∫ø${realtime.life_index.ultraviolet.desc} üí®${mapWind(
      realtime.wind.speed,
      realtime.wind.direction
    )}

${alertInfo}${hourlySkycon}
`,
    {
      "media-url": `${mapSkycon(realtime.skycon)[1]}`,
    }
  );
}

function dailyForcast() { }

/**************************** Â§©Ê∞îÂØπÁÖßË°® *********************************/

function mapAlertCode(code) {
  const names = {
    "01": "üå™ Âè∞È£é",
    "02": "‚õà Êö¥Èõ®",
    "03": "‚ùÑÔ∏è Êö¥Èõ™",
    "04": "‚ùÑ ÂØíÊΩÆ",
    "05": "üí® Â§ßÈ£é",
    "06": "üí® Ê≤ôÂ∞òÊö¥",
    "07": "‚òÑÔ∏è È´òÊ∏©",
    "08": "Âπ≤Êó±",
    "09": "üå¶ Èõ∑Áîµ",
    10: "ÂÜ∞Èõπ",
    11: "ÈúúÂÜª",
    12: "üå´ Â§ßÈõæ",
    13: "Èúæ",
    14: "üö± ÈôçÊ∞¥Èáè‰∏çË∂≥",
    91: "Èõ∑ÁîµÂ§ßÈ£é",
  };
  return names[code] || code;
}

function mapSkycon(code) {
  const names = {
    CLEAR_DAY: ["‚òÄÔ∏è Êô¥Â§©", "https://i.imgur.com/rMXv1o8.jpg"],
    CLEAR_NIGHT: ["üåï Êô¥Â§ú", "https://i.imgur.com/W4WsfBk.jpg"],
    PARTLY_CLOUDY_DAY: ["üå§ Â§ö‰∫ë", "https://i.imgur.com/wh3jFzG.jpg"],
    PARTLY_CLOUDY_NIGHT: ["‚õÖÔ∏è Â§ö‰∫ë", "https://i.imgur.com/Bh0tK93.jpg"],
    CLOUDY: ["‚òÅÔ∏è Èò¥", "https://i.imgur.com/DLVryRA.jpg"],
    WIND: ["üå™ ÊúâÈ£é", "https://i.imgur.com/rMXv1o8.jpg"],
    HAZE: ["üå´ ÈõæÈúæ", "https://i.imgur.com/DLVryRA.jpg"],
    RAIN: ["üåß Èõ®", "https://i.imgur.com/c5UMetN.jpg"],
    SNOW: ["‚ùÑÔ∏è Èõ™", "https://i.imgur.com/Dw2yLOr.jpg"],
  };
  return names[code] || code;
}

function mapWind(speed, degree) {
  let res = "";
  if (speed < 1) res += "Êó†È£é";
  else if (speed < 5) res += "ÂæÆÈ£é";
  else if (speed < 11) res += "ÂíåÈ£é";
  else if (speed < 19) res += "Ê∏ÖÈ£é";
  else if (speed < 28) res += "Âº∫È£é";
  else if (speed < 39) res += "ÁñæÈ£é";
  else if (speed < 50) res += "Â§ßÈ£é";
  else if (speed < 62) res += "ÁÉàÈ£é";
  else if (speed < 75) res += "È£éÊö¥";
  else if (speed < 89) res += "ÁãÇÊö¥È£é";
  else res += "È£ìÈ£é";
  res += " ";
  res += degree <= 11
    ? "ÂåóÈ£é"
    : degree <= 34
    ? "‰∏úÂåóÈ£é"
    : degree <= 56
    ? "‰∏úÈ£é"
    : degree <= 79
    ? "‰∏úÂçóÈ£é"
    : degree <= 101
    ? "ÂçóÈ£é"
    : degree <= 124
    ? "Ë•øÂçóÈ£é"
    : degree <= 146
    ? "Ë•øÈ£é"
    : degree <= 169
    ? "Ë•øÂåóÈ£é"
    : "ÂåóÈ£é";
  return res;
}

/**************************** Helper functions *********************************/

function API(script = "ÂΩ©‰∫ëÂ§©Ê∞î", name = "local", id = "DD3171") {
  const isRequest = typeof $request !== "undefined";
  const isSurge = typeof $httpClient !== "undefined";
  const isQuanX = typeof $task !== "undefined";
  const isLoon = typeof $loon !== "undefined";
  const read = (key) => {
    if (isSurge || isLoon) {
      return $persistentStore.read(key);
    }
    if (isQuanX) {
      return $prefs.valueForKey(key);
    }
  };
  const write = (value, key) => {
    if (isSurge || isLoon) {
      return $persistentStore.write(value, key);
    }
    if (isQuanX) {
      return $prefs.setValueForKey(value, key);
    }
  };
  const notify = (title, subtitle, message, options = {}) => {
    const openURL = options["open-url"];
    const mediaURL = options["media-url"];
    if (isSurge) {
      $notification.post(title, subtitle, message, {
        url: openURL,
        "media-url": mediaURL,
      });
    }
    if (isQuanX) {
      $notify(title, subtitle, message, options);
    }
    if (isLoon) {
      $notification.post(title, subtitle, message, openURL);
    }
  };
  const log = (message) => console.log(message);
  const info = (message) => console.log(message);
  const wait = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
  const done = (value = {}) => $done(value);
  return {
    read,
    write,
    notify,
    log,
    info,
    wait,
    done,
    isRequest,
    isSurge,
    isQuanX,
    isLoon,
  };
}

function MYERR() {
  class TokenError extends Error {
    constructor(message) {
      super(message);
      this.name = this.constructor.name;
    }
  }

  return {
    TokenError,
  };
}
